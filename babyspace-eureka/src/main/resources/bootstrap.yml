eureka:
  #datacenter: my
  #environment: dev
  instance:
  #  hostname: eureka-center  #服务注册中心实例的主机名
    appname: eureka-center   #注册在的Eureka服务中的应用名称
  #    app-group-name: dev      #注册在Eureka服务中的应用组名
    instance-id: eureka-center        #该实例注册到服务中心的唯一ID
  #    ip-address:              #该实例的IP地址
  #    prefer-ip-address:       #该实例，相较于hostname是否优先使用IP
  #    initial-status:          #初始化该实例，注册到服务中心的初始状态
  #    instance-enabled-onit:   #表明是否只要此实例注册到服务中心，立马就进行通信
  #    namespace:               #该服务实例的命名空间,用于查找属性
  #    metadata-map:            #该服务实例的子定义元数据，可以被服务中心接受到
  #
  #
  #
  #    lease-expiration-duration-in-seconds:   #服务中心删除此服务实例的等待时间(秒为单位),时间间隔为最后一次服务中心接受到的心跳时间
  #    lease-renewal-interval-in-seconds:      #该实例给服务中心发送心跳的间隔时间，用于表明该服务实例可用
  #    registry:
  #      #expected-number-of-clients-sending-renews:   #每分钟续约次数
  #      #default-open-for-traffic-count:       #该实例，注册服务中心，默认打开的通信数量
  #    health-check-url:                        #该实例健康检查url,绝对路径
  #    health-check-url-path:                   #该实例健康检查url,相对路径
  #    home-page-url:                           #该实例的主页url,绝对路径
  #    home-page-url-path:                      #该实例的主页url,相对路径
  #    secure-health-check-url:                 #该实例的安全健康检查url,绝对路径
  #    non-secure-port:                         #http通信端口
  #    secure-port:                             #https通信端口
  #    non-secure-port-enabled:                 #https通信端口是否启用
  #    secure-port-enabled:                     #http通信端口是否启用
  #    secure-virtual-host-name:                #该实例的安全虚拟主机名称(https)
  #    virtual-host-name:                       #该实例的虚拟主机名称(http)
  #    status-page-url:                         #该实例的状态呈现url,绝对路径
  #    status-page-url-path:                    #该实例的状态呈现url,相对路径




  client:
    registerWithEureka: false # 单点的时候设置为 false 禁止注册自身
    fetchRegistry: false
    serviceUrl:
      defaultZone: http://localhost:8761/eureka

  server:
    enableSelfPreservation: true              #服务端开启自我保护模式。无论什么情况，服务端都会保持一定数量的服务。避免client与server的网络问题，而出现大量的服务被清除。
#    evictionIntervalTimerInMs: 10000          #开启清除无效服务的定时任务，时间间隔。默认1分钟
#    delta-retention-timer-interval-in-ms: 0   #间隔多长时间，清除过期的delta数据
#    disable-delta: false                      #过期数据，是否也提供给client
#    log-identity-headers: true                #eureka服务端是否记录client的身份header
#    rate-limiter-burst-size: 10               #请求频率限制器
#    rate-limiter-enabled: false               #是否开启请求频率限制器
#    rate-limiter-full-fetch-average-rate: 100  #请求频率的平均值
#    rate-limiter-throttle-standard-clients: false     #是否对标准的client进行频率请求限制。如果是false，则只对非标准client进行限制
#    rate-limiter-registry-fetch-average-rate: 500     #注册服务、拉去服务列表数据的请求频率的平均值
#    rate-limiter-privileged-clients:    #设置信任的client listw
#    renewal-percent-threshold: 0.85     #在设置的时间范围类，期望与client续约的百分比。
#    renewal-threshold-update-interval-ms: 0   #多长时间更新续约的阈值
#    response-cache-auto-expiration-in-seconds: 180 #对于缓存的注册数据，多长时间过期
#    response-cache-update-interval-ms: 0           #多长时间更新一次缓存中的服务注册数据
#    retention-time-in-m-s-in-delta-queue: 0        #缓存增量数据的时间，以便在检索的时候不丢失信息
#    sync-when-timestamp-differs: true    #当时间戳不一致的时候，是否进行同步
#    use-read-only-response-cache: true   #是否采用只读缓存策略，只读策略对于缓存的数据不会过期。



